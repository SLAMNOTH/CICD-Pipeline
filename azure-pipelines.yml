# azure-pipelines.yml

# Trigger de pipeline automatisch bij wijzigingen in de 'main' branch.
trigger:
- none

# Definieer variabelen die in de hele pipeline worden gebruikt.
variables:
  # Naam van de resourcegroep waar de infrastructuur wordt uitgerold.
  resourceGroupName: 'JUICT-HUB-SPOKE-PROD'

  # Azure-regio voor de implementatie.
  location: 'westeurope'

  # Pad naar de Bicep-bestanden in de repository.
  bicepTemplateFile: './main.bicep'
  bicepParameterFile: './main.bicepparam'

  # Naam van de Azure service connection in je DevOps-project.
  # Deze service connection moet rechten hebben op de resourcegroep.
  azureServiceConnection: 'azure-connection'

stages:

# =========================================================================
# FASE 1: VALIDATE - Controleer de code op syntax en beveiligingsfouten.
# =========================================================================
- stage: Validate
  displayName: 'Fase 1: Valideer Bicep & Beveiliging'
  jobs:
  - job: ValidateCode
    displayName: 'Valideer Code Kwaliteit'
    pool:
      vmImage: 'ubuntu-latest' # Gebruik een door Microsoft gehoste agent.
    steps:
    - task: AzureCLI@2
      displayName: 'Valideer Bicep syntax (bicep build)'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Controleren van Bicep-bestanden op syntaxfouten..."
          az bicep build --file $(bicepTemplateFile)

    # Deze taak scant je code op veelvoorkomende beveiligingsproblemen.
    - task: MicrosoftSecurityDevOps@1
      displayName: 'Voer Microsoft Security DevOps-analyse uit'

# =========================================================================
# FASE 2: TEST - Simuleer de uitrol met 'what-if' om de impact te zien.
# =========================================================================
- stage: Test
  displayName: 'Fase 2: Test Infrastructuur (What-If)'
  dependsOn: Validate
  condition: succeeded() # Voer alleen uit als de validatiefase succesvol was.
  jobs:
  - job: WhatIfDeployment
    displayName: 'Voorbeeld van uitrol met What-If'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Voer What-If uitrol uit'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Simuleren van de uitrol om wijzigingen te bekijken..."
          az deployment group what-if \
            --resource-group $(resourceGroupName) \
            --template-file $(bicepTemplateFile) \
            --parameters $(bicepParameterFile) \
            --parameters adminPassword=$(adminPassword) # Geef het geheime wachtwoord door

# =========================================================================
# FASE 3: DEPLOY - Rol de infrastructuur daadwerkelijk uit naar Azure.
# =========================================================================
- stage: Deploy
  displayName: 'Fase 3: Rol Infrastructuur Uit'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - deployment: DeployInfrastructure
    displayName: 'Uitrol van Hub-en-Spoke Architectuur'
    pool:
      vmImage: 'ubuntu-latest'
    # Gebruik een 'environment' om handmatige goedkeuringen in te stellen voor productie.
    environment: 'production' 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Rol Bicep-template uit naar Azure'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Starten van de uitrol van de hub-en-spoke infrastructuur..."
                az deployment group create \
                  --name "pipeline-deployment-$(Build.BuildId)" \
                  --resource-group $(resourceGroupName) \
                  --template-file $(bicepTemplateFile) \
                  --parameters $(bicepParameterFile) \
                  --parameters adminPassword=$(adminPassword) # Geef het geheime wachtwoord door
